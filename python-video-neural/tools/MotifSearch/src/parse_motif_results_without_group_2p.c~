#include "types.h"
/* this will parse the spot vector and prepare some numbers of list
 * equal to the number of unique motifs queried. The file will contain the
 * info of the matches in below given format. This file is to be processed 
 * further to get the desired result.
 * <query_file_name> <ref_file_name> <start_sample> <end_sample> <score>
 */

//declaring functions
int spot_comp_func(const void* a, const void* b);



// my main
int main(int argc, char* argv[]) {
  

  if (argc != 4 +1) {
    printf("!!!!!!Error!!!!!\n");
    printf("Usage: parse_motif_results <result_file> <frame-shift> <out-file>");
    exit(-1);
  }
  
  //int top_n = atoi(argv[2]);
  int frame_shift = atoi(argv[2]);

  MemberVectorPTR member_vec_ptr = create_MemberVectorPTR();
  alloc_members_MemberVectorPTR(member_vec_ptr, 500);
  
  // not sure whether the read binary mode works.
  FILEPTR fin;
  if ((fin = fopen(argv[1], "rb")) == NULL) {
    printf("ERROR: Cannot open file %s\n", argv[1]);
    exit(-1);
  }

  // reading the result into spot vector
  printf("Reading spot_vector...\n");
  scanf_MemberVectorPTR(fin, member_vec_ptr);
  printf("Reading over, %d members read\n", member_vec_ptr->size);
  // closing the file
  fclose(fin);

   
  // sorting the spot_vector_ptr w.r.t. to best_member score in descending order
  //  printf("Sorting spots...\n");
  //qsort(spot_vec_ptr->vec, spot_vec_ptr->size, sizeof(Spot), spot_comp_func);
  //printf("Sorting over\n");
  

  // loop over spot vector and get the unique queires.
  /* printf("Finding unique queries... \n");
  char queries[10][500]; 
  int query_ctr = 0; // query counter
  {
    int i;
    for (i = 0; i < spot_vec_ptr -> size; i++) {
      int j = 0;
      for (j = 0; j < query_ctr; j++)
	if (strcmp(spot_vec_ptr->vec[i].query_path, queries[j]) == 0)
	  break;
      // if current query is not found in queries then add it to the list.
      if (j == query_ctr) {
	strcpy(queries[query_ctr], spot_vec_ptr->vec[i].query_path);
	++query_ctr;
      }
    }
    printf("%d unique queries found namely\n", query_ctr);
    for (i = 0; i <  query_ctr; i++)
      printf("%d)\t%s\n", i, queries[i]);
  }
  */

  // loop over and do something
  int i;  
  printf("Finding densities of hits in each ref...\n");

  // first creating file pointers for each of the query output.
  /*  FILEPTR fp[query_ctr];
  int fp_ctr[query_ctr];
  for (i = 0; i < query_ctr; i++){
    char dummy[500]; char dummy2[100];
    strcpy(dummy, argv[4]);
    strcat(dummy, "_motif_");
    sprintf(dummy2, "%d", i+1);
    strcat(dummy, dummy2);
    fp[i] = fopen(dummy, "wb");
    fp_ctr[i] = 0;
  }
  */

  char  outfilename[200];
  int r = 0;
  int last_start = INT_MAX;
  FILEPTR fout = fopen("zzzzzmm----dummy-----mmmzzzz");
  for (i = 0; i < member_vec_ptr -> size; i++) {
    if (member_vec_ptr->vec[i].end < last_start) {
      r = r+1;
      if (fout) 
	fclose(fout);
      strcpy(outfilename, argv[2]);
      strcat(outfilename, "parsed.");
      char dum[10];
      sprintf(dum, "%d", i);
      strcat(outfilename, dum);
      fout = fopen(outfilename, "w");
    }
    

    fprintf(fout, "%d %d %f %f %f %f %f\n",
	    member_vec_ptr -> vec[i].start,
	    member_vec_ptr -> vec[i].end,
	    member_vec_ptr -> vec[i].score,
            member_vec_ptr -> vec[i].cost,
	    member_vec_ptr -> vec[i].cost_actual,
	    member_vec_ptr -> vec[i].war,
	    member_vec_ptr -> vec[i].waq
   	    );
    last_start = member_vec_ptr->vec[i].start;
  }
}

  //destroing all the fps
  free_members_MemberVectorPTR(member_vec_ptr);
  destroy_MemberVectorPTR(member_vec_ptr);

  return 0;
}


// define functions
int spot_comp_func(const void* a, const void* b) {
  if (((Spot*) a) -> best_member_ptr -> score == ((Spot*) b) -> best_member_ptr -> score) 
    return 0;
  else if (((Spot*) a) -> best_member_ptr -> score > ((Spot*) b) -> best_member_ptr -> score) 
    return -1; // this is done for desceding order
  else 
    return 1; // this is done for descending order
}
